<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GameJam游戏准备以及GameJam类比赛</title>
    <link href="/2023/11/18/GameJam%E6%B8%B8%E6%88%8F%E5%87%86%E5%A4%87%E4%BB%A5%E5%8F%8AGameJam%E7%B1%BB%E6%AF%94%E8%B5%9B/"/>
    <url>/2023/11/18/GameJam%E6%B8%B8%E6%88%8F%E5%87%86%E5%A4%87%E4%BB%A5%E5%8F%8AGameJam%E7%B1%BB%E6%AF%94%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="GameJam游戏准备以及GameJam类比赛"><a href="#GameJam游戏准备以及GameJam类比赛" class="headerlink" title="GameJam游戏准备以及GameJam类比赛"></a>GameJam游戏准备以及GameJam类比赛</h1><h2 id="一、GlobalGameJam基本规则（明年二月）"><a href="#一、GlobalGameJam基本规则（明年二月）" class="headerlink" title="一、GlobalGameJam基本规则（明年二月）"></a>一、GlobalGameJam基本规则（明年二月）</h2><ol><li>时长48小时，周五下午4点到周日下午4点</li><li>场地不限制，官方会提供线下场地</li><li>素材不限制，可以借鉴网上的资源，以前的项目（不要过分借鉴，虽然不影响成绩，但影响体验）</li></ol><h2 id="二、职责分配（2024）"><a href="#二、职责分配（2024）" class="headerlink" title="二、职责分配（2024）"></a>二、职责分配（2024）</h2><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-number">1.</span> 主要使用unity（c<span class="hljs-meta">#）进行开发，负责使用软件和脚本实现各项基本功能</span><br><span class="hljs-number">2.</span> 能够使用asset store ， 了解如何导入本地和网络上的美术资源（tilemap，sprite），调整美术资源并应用，包括动画应用（animation调整&amp;animator状态机）。<br><span class="hljs-number">3.</span> 了解unity c<span class="hljs-meta">#代码基本原理，脚本基本知识，至少理解自己写出代码的80%，以便于bug修改和维护，</span><br><span class="hljs-number">4.</span> 能够和策划合作，共同探讨出技术上玩法上可实现的功能并实现（当然明年不会有太多创新）<br><span class="hljs-number">5.</span> 能够和美术合作，确定美术资源的具体要求（像素大小，帧数），协商制作出UI的各个部分。<br><span class="hljs-number">6.</span> 遵循确定的代码规范（命名规则），方便与其他程序员的协作。<br></code></pre></td></tr></table></figure><h3 id="策划"><a href="#策划" class="headerlink" title="策划"></a>策划</h3><ol><li>了解游戏开发的基本流程。</li><li>主要游戏开发过程中，负责设计、制定游戏整体的设计方案（世界观、玩法、系统等）。</li><li>在游戏开发进程中与美术，程序进行沟通，提高沟通效率。</li><li>在开发期间不断思考，交流，收集并与其他岗位探讨idea实现的可行性。</li><li>负责一点后勤保障QAQ（我们这次策划应该比较闲）</li></ol><h3 id="美术"><a href="#美术" class="headerlink" title="美术"></a>美术</h3><ol><li>能够较为熟练的使用基本PhotoShop功能，了解图层，会使用基本工具，会对画布大小进行调整；</li><li>能够画出完成度高的封面。</li><li>了解unity动画相关模块基本知识，了解unityUI基本组件含义。</li><li>掌握基本的像素画画法（包括人物，场景），掌握像素画基本动画制作；掌握一些基本的画面效果。使画面更丰富（举例：奥特曼光波那个波，下雨时的雨点）</li><li>能够与程序、策划沟通，共同完成UI制作，封面绘制，动画素材制作。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今年我们技术水平达不到很高，每个职位最重要的是沟通合作，知道其他小伙伴能做什么不能做什么非常重要，齐心协力，感受团队合作的魅力！</p><h2 id="三、-预设"><a href="#三、-预设" class="headerlink" title="三、 预设"></a>三、 预设</h2><p>受限于技术水平和美术资源，今年可能大概率做俯视角或横版的2d 像素游戏，加入一点对话剧情，有一个创新的游戏设定，制作一到两个简单场景，昨晚比做好更重要。</p><h2 id="四、信息渠道"><a href="#四、信息渠道" class="headerlink" title="四、信息渠道"></a>四、信息渠道</h2><h3 id="国内："><a href="#国内：" class="headerlink" title="国内："></a>国内：</h3><ol><li><p>公众号：ciga独立游戏联盟 ， UGDAP大学生游戏开发联盟 （赛事信息）、</p></li><li><p>知乎，百度，csdn，腾讯云开发社区，阿里云开发社区，unity开发社区，unity官方文档，b站教程</p></li></ol><h3 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h3><ol><li>YouTube ：各种教程</li><li>stackoverflow：一些程序上的问题可以问</li><li>pixiv ： 美术灵感</li></ol><p>大家在学习过程中的相关网站也可以自己收藏，分享~</p><p>​    </p><p>   ​               </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>近期的unity学习计划</title>
    <link href="/2023/11/13/%E8%BF%91%E6%9C%9F%E7%9A%84unity%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <url>/2023/11/13/%E8%BF%91%E6%9C%9F%E7%9A%84unity%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="近期的unity学习计划与24年Gamejam的目标"><a href="#近期的unity学习计划与24年Gamejam的目标" class="headerlink" title="近期的unity学习计划与24年Gamejam的目标"></a>近期的unity学习计划与24年Gamejam的目标</h1><h2 id="一、24-Gamejam-目标"><a href="#一、24-Gamejam-目标" class="headerlink" title="一、24 Gamejam 目标"></a>一、24 Gamejam 目标</h2><ul><li>使用unity制作出一款完整的，可运行的2D 横版&#x2F;俯视角，动作&#x2F;跑酷 或 2D rpg 游戏</li><li>48小时内，遵循基本的开发流程，尽量使用业界普遍使用的开发工具：<ol><li>通讯：微信</li><li>文档撰写：office</li><li>仓库管理*：gitee svn（尽量）</li><li>版本控制：svn</li><li>AI：GPT4，Midjourney, Nijijourney</li><li>开发软件：unity2022.3.5f1c1</li></ol></li><li>比赛地点：武汉高校或上海</li><li>比赛安排时间：2024.1.6确定团队，中旬开始预定车票酒店。</li><li>12月上旬会组织一些团体活动，有兴趣参赛的可以磨合</li></ul><h2 id="二、学习计划（本月11月）"><a href="#二、学习计划（本月11月）" class="headerlink" title="二、学习计划（本月11月）"></a>二、学习计划（本月11月）</h2><ol><li>完成unity项目：带攻击系统，简单音效，敌人，UI，地图视察滚动，对话框的项目</li><li>通过专题式阅读文档并做笔记，巩固基础知识</li><li>学习gitee svn、svn 的版本控制</li><li>使用gpt辅助制作过程。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>unity学习记录——人物的基本移动</title>
    <link href="/2023/11/12/unity%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BA%BA%E7%89%A9%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A7%BB%E5%8A%A8/"/>
    <url>/2023/11/12/unity%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94%E4%BA%BA%E7%89%A9%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A7%BB%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Unity2D人物的基本移动"><a href="#Unity2D人物的基本移动" class="headerlink" title="Unity2D人物的基本移动"></a>Unity2D人物的基本移动</h1><h2 id="一、学习主要内容"><a href="#一、学习主要内容" class="headerlink" title="一、学习主要内容"></a>一、学习主要内容</h2><ul><li>人物左右移动的代码实现</li><li>人物跳跃的代码实现</li><li>人物动作动画</li><li>人物冲刺、下蹲等动作代码实现</li></ul><h2 id="二、具体知识点"><a href="#二、具体知识点" class="headerlink" title="二、具体知识点"></a>二、具体知识点</h2><h3 id="一、人物左右移动的代码实现"><a href="#一、人物左右移动的代码实现" class="headerlink" title="一、人物左右移动的代码实现"></a>一、人物左右移动的代码实现</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span>()</span>&#123;<br>        Vector2 p = transform.position;<br>        movex = Input.GetAxisRaw(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-keyword">if</span>(animator.GetBool(<span class="hljs-string">&quot;isCrouch&quot;</span>) == <span class="hljs-literal">false</span>)&#123;<br>            p.x += movex*moveSpeed*Time.deltaTime;<br>            transform.position = p ;<br>            <span class="hljs-keyword">if</span>(movex != <span class="hljs-number">0</span>)<br>            &#123;<br>                transform.localScale = <span class="hljs-keyword">new</span> Vector3(movex * miniscale, miniscale, miniscale);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>deltatime：固定代码执行速率，保证游戏不会因为帧率而影响恒定速率的移动（update执行方式是per frame ， fixedupdate 是 恒定帧率 常用于检测）</p><p>localscale：改变sprite朝向，向左走就翻转（-1），向右走不变（+1）</p><p>miniscale：缩放倍数</p><h3 id="二、人物跳跃的代码实现"><a href="#二、人物跳跃的代码实现" class="headerlink" title="二、人物跳跃的代码实现"></a>二、人物跳跃的代码实现</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">jumpinput</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(Input.GetKeyDown (KeyCode.Space)&amp;&amp; (animator.GetBool(<span class="hljs-string">&quot;isCrouch&quot;</span>)==<span class="hljs-literal">false</span>))&#123;<br>            isJump = <span class="hljs-literal">true</span> ;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">jump</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>( isJump==<span class="hljs-literal">true</span>&amp;&amp;isGround==<span class="hljs-literal">true</span>)&#123;<br>             marioRigidbody.velocity = Vector2.up * jumpSpeed ;<br>             isJump = <span class="hljs-literal">false</span> ;<br>        &#125;<span class="hljs-keyword">else</span> isJump = <span class="hljs-literal">false</span> ;<br>    &#125;<br></code></pre></td></tr></table></figure><p>人物跳跃需要考虑是否在地面上，如果人物在空中还能跳那就有点奇怪（多段跳不考虑的情况下），所以需要一个碰撞检测。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionStay2D</span>(<span class="hljs-params">Collision2D collision</span>)</span><br>   &#123;<br>       <span class="hljs-keyword">if</span>(collision.transform.tag==<span class="hljs-string">&quot;Ground&quot;</span>) <br>       &#123;<br>           isGround = <span class="hljs-literal">true</span>; <br>       &#125;<br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionExit2D</span>(<span class="hljs-params">Collision2D collision</span>)</span><br>   &#123;<br>       <span class="hljs-keyword">if</span> (collision.transform.tag == <span class="hljs-string">&quot;Ground&quot;</span>)<br>       &#123;<br>           isGround = <span class="hljs-literal">false</span>;<br>       &#125;<br>   &#125; <br></code></pre></td></tr></table></figure><p>private void OnCollisionStay2D(Collision2D collision)</p><p>private void OnCollisionExit2D(Collision2D collision）</p><p>分别是两个碰撞检测函数，为了便于检测可以添加一个“Ground”图层编码，当人物碰撞到ground时设置bool为真，反之为假。</p><h3 id="三、人物动作动画"><a href="#三、人物动作动画" class="headerlink" title="三、人物动作动画"></a>三、人物动作动画</h3><ol><li>准备合适的sprite集（最好高度大小和基本图像相同）</li><li>添加animator 。</li><li>创建 animation ，调整好合适的速度</li><li>通过animator设置变量，设置transition条件，改变exit time（好像都是零），并在函数中调用。</li></ol><p><img src="https://pic2.zhimg.com/80/v2-0eb016b36b367febf1ac609aa5ed8365_1440w.webp" alt="animator"></p><p><img src="https://pic3.zhimg.com/80/v2-03468a29051147d2388385ae3423fa1e_1440w.webp" alt=" variable"></p><p>四、人物冲刺，下蹲的代码实现</p><p>冲刺：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">private</span> IEnumerator <span class="hljs-title">Dash</span>()</span><br>    &#123;<br>        canDash = <span class="hljs-literal">false</span> ;<br>        isDashing = <span class="hljs-literal">true</span> ;<br>        animator.SetBool(<span class="hljs-string">&quot;dash&quot;</span>,isDashing);<br>        marioRigidbody.gravityScale = <span class="hljs-number">0.1f</span> ;<br>        marioRigidbody.velocity = <span class="hljs-keyword">new</span> Vector2(DashingPower*transform.localScale.x*<span class="hljs-number">1.08f</span>,<span class="hljs-number">0f</span>);<br><br>        <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSeconds</span>(<span class="hljs-params">DashingTime</span>)</span>;<br>        isDashing = <span class="hljs-literal">false</span> ;<br>        animator.SetBool(<span class="hljs-string">&quot;dash&quot;</span>,isDashing);<br>        marioRigidbody.gravityScale = <span class="hljs-number">1f</span> ;<br>        <span class="hljs-function"><span class="hljs-keyword">yield</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title">WaitForSeconds</span>(<span class="hljs-params">DashCoolTime</span>)</span>;<br>        canDash = <span class="hljs-literal">true</span> ;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dash</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(Input.GetKeyDown(KeyCode.LeftShift))&#123;<br>            StartCoroutine(Dash());<br>            <br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>冲刺时，因为要设置冲刺时间，冲刺冷却时间，所以引入协程函数（通过主程序外的副程序来计时）IEnumerator。</p><p>下蹲：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Crouch</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(Input.GetKey(KeyCode.S))&#123;<br>            <br>            animator.SetBool(<span class="hljs-string">&quot;isCrouch&quot;</span>,<span class="hljs-literal">true</span>);<br>        &#125;<span class="hljs-keyword">else</span> animator.SetBool(<span class="hljs-string">&quot;isCrouch&quot;</span>,<span class="hljs-literal">false</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后的演示视频：</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Q&amp;A①</title>
    <link href="/2023/10/31/C-Q-A%E2%91%A0/"/>
    <url>/2023/10/31/C-Q-A%E2%91%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="C-Q-A-①"><a href="#C-Q-A-①" class="headerlink" title="C++ Q&amp;A ①"></a>C++ Q&amp;A ①</h1><ol><li>二级指针与二级指针数组</li><li>指针数组的应用</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>稚晖君的技能树</title>
    <link href="/2023/10/26/skills/"/>
    <url>/2023/10/26/skills/</url>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-f910058d87c64718ceb7f4c6ee0e262f_1440w.webp" alt="稚晖君的技能树"></p><p>真的巨。</p>]]></content>
    
    
    
    <tags>
      
      <tag>career</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游戏设计杂记①</title>
    <link href="/2023/10/26/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%9D%82%E8%AE%B0%E2%91%A0/"/>
    <url>/2023/10/26/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%9D%82%E8%AE%B0%E2%91%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Plus Study Log ①</title>
    <link href="/2023/10/24/C-Primer-Study-Log-%E2%91%A0/"/>
    <url>/2023/10/24/C-Primer-Study-Log-%E2%91%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="C-Primer-Plus-Study-Log①"><a href="#C-Primer-Plus-Study-Log①" class="headerlink" title="C++ Primer Plus Study Log①"></a>C++ Primer Plus Study Log①</h1><h4 id="阅读此书的第一次记录"><a href="#阅读此书的第一次记录" class="headerlink" title="阅读此书的第一次记录"></a>阅读此书的第一次记录</h4><h5 id="一、指针的使用"><a href="#一、指针的使用" class="headerlink" title="一、指针的使用"></a>一、指针的使用</h5><p>注意，在引用’*’之前，一定要赋予指针一个确定的地址，否则将会出现一些不必要的风险。</p><p>指针本身是一种数据类型，它与数组相同，都基于另一种数据类型存在。如：int* pointer 表示指向整型的指针。</p><p>所以，要想赋予指针 pointer 一个地址，需要进行强制类型转换：pointer &#x3D; (int* )0xB8000000 </p><h4 id="二、指针的几个特点"><a href="#二、指针的几个特点" class="headerlink" title="二、指针的几个特点"></a>二、指针的几个特点</h4><ol><li>指针算术：C++允许将指针类型与整数类型相加，根据指针指向的数据类型，”pt+1”意味着”pt + size of data type”，但似乎只用于数组当中。</li><li>对于数组名，它是一种指针，所以存在以下等式：”array &#x3D; &amp;array[0]”;</li><li>基于指针与new关键字，可以定义动态数组：<blockquote><p>int* pointer &#x3D; new int[size] ;<br>delete []pointer ;&#x2F;&#x2F;释放动态内存。</p></blockquote></li></ol><p>之所以称之为动态，是因为该内存是在运行阶段，根据程序规定而分配内存。<br>4. “*“表示解除引用，而对于数组，”array[]”起到同样的效果。<br>   有这样的等式：”*(array + 3) &#x3D; array[3]”   </p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
